{"version":3,"sources":["assets/img/profile.png","store/users/reducers/activeUser.js","store/users/reducers/users.js","store/messages/reducers/messages.js","store/rootReducer.js","store/users/types/index.js","store/messages/types/index.js","store/store.js","components/Message/Message.js","utils/date.js","config/date.js","components/MessageList/MessageList.js","components/UserCard/UserCard.js","components/UserList/UserList.js","components/NewMessage/NewMessage.js","containers/MessageList/MessageListContainer.js","containers/MessageList/index.js","containers/UserList/UserListContainer.js","containers/UserList/index.js","store/users/actions/setActiveUser.js","containers/NewMessage/NewMessageContainer.js","containers/NewMessage/index.js","store/messages/actions/sendMessage.js","views/pages/Chat/ChatPage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","initialState","users","rootReducer","combineReducers","activeUser","state","action","type","payload","messages","recepientId","to","id","message","recepientMessages","date","Date","persistConfig","key","storage","persistedReducer","persistReducer","store","createStore","composeWithDevTools","applyMiddleware","persistor","persistStore","Message","className","format","formatDateTime","MessageList","chatEndRef","useRef","useEffect","current","scrollIntoView","length","map","i","ref","UserCard","name","user","onClick","active","cn","alt","src","profileImg","UserList","activeUserId","onUserClick","userId","NewMessage","onSubmit","onChange","handleSubmit","useCallback","event","preventDefault","handleChange","value","target","MessageListContainer","connect","UserListContainer","setActiveUser","mapDispatchToProps","NewMessageContainer","sendMessage","useState","setMessage","ChatPage","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","loading","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.689dd9a7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/profile.777a978f.png\";","import users from '../../../mocks/user.json';\nimport { SET_ACTIVE_USER } from '../types';\n\nconst initialState = users[0];\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case SET_ACTIVE_USER:\n      return action.payload;\n    default:\n      return state;\n  }\n}","import users from '../../../mocks/user.json';\n\nconst initialState = users;\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    default:\n      return state;\n  }\n}","import { SEND_MESSAGE } from \"../types\";\n\nconst initialState = {};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case SEND_MESSAGE:\n      const {\n        to: { id: recepientId },\n        message\n      } = action.payload;\n      const recepientMessages = state[recepientId] || [];\n\n      return {\n        ...state,\n        [recepientId]: [...recepientMessages, { message, date: new Date() }]\n      }\n    default:\n      return state;\n  }\n}","import { combineReducers } from \"redux\";\nimport { activeUser, users } from './users/reducers';\nimport { messages } from './messages/reducers';\n\nconst rootReducer = combineReducers({\n  activeUser,\n  users,\n  messages\n});\n\nexport default rootReducer;\n","export const SET_ACTIVE_USER = \"ACTIVE_USER/SET\"","export const SEND_MESSAGE = \"MESSAGES/SEND\";","import { applyMiddleware, createStore } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport { persistReducer, persistStore } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\n\nimport rootReducer from \"./rootReducer\";\n\nconst persistConfig = {\n  key: \"quick-chat\",\n  storage,\n};\n\nconst middleware = [];\n\nexport const persistedReducer = persistReducer(persistConfig, rootReducer);\nexport const store = createStore(persistedReducer, composeWithDevTools(applyMiddleware(...middleware)));\nexport const persistor = persistStore(store);\n","import React from 'react';\nimport './styles.css';\nimport { formatDateTime } from '../../utils';\n\nconst Message = ({ message, date }) => {\n  return (\n    <div className='message'>\n      <div>{message}</div>\n      <div className='message__date'>{formatDateTime(date)}</div>\n    </div>\n  )\n}\n\nexport default Message;","import { format } from 'date-fns';\nimport { dateTimeFormat } from '../config/date';\n\nexport const formatDateTime = (date) => format(new Date(date), dateTimeFormat)","export const dateTimeFormat = 'MM/dd/yyyy HH:mm'","import React, { useRef, useEffect } from 'react';\nimport Message from '../Message';\nimport './styles.css';\n\nconst MessageList = ({ messages = [] }) => {\n  const chatEndRef = useRef();\n\n  useEffect(() => {\n    if (chatEndRef && chatEndRef.current) {\n      chatEndRef.current.scrollIntoView();\n    }\n  }, [chatEndRef, messages.length]);\n\n  return (\n    <div className='message-list'>\n      {messages.map((message, i) => (\n        <div key={i} className='message-list__message'>\n          <Message {...message} />\n        </div>\n      ))}\n      <div ref={chatEndRef}></div>\n    </div>\n  );\n}\n\nexport default MessageList;","import React from 'react';\nimport cn from 'classnames'\nimport profileImg from '../../assets/img/profile.png';\nimport './styles.css';\n\nconst UserCard = ({ user: { name }, onClick, active }) => (\n  <button onClick={onClick} className={cn('user-card', { 'user-card--active': active })}>\n    <img alt={name} className='user-card__avatar' src={profileImg} />\n    <div className='user-card__name'>{name}</div>\n  </button>\n)\n\nexport default UserCard;","import React from 'react';\nimport UserCard from '../UserCard';\n\nconst UserList = ({ users, activeUser: { id: activeUserId }, onUserClick }) => (\n  <div className='user-list'>\n    {\n      users.map((user) => {\n        const { id: userId } = user;\n        return (\n          <UserCard\n            key={userId}\n            active={activeUserId === userId}\n            user={user}\n            onClick={() => onUserClick(user)}\n          />\n        );\n      })\n    }\n  </div>\n)\n\nexport default UserList;","import React, { useCallback } from 'react';\nimport './styles.css';\n\nconst NewMessage = ({ onSubmit, onChange, message }) => {\n\n  const handleSubmit = useCallback((event) => {\n    event.preventDefault();\n    onSubmit();\n  }, [onSubmit]);\n\n  const handleChange = useCallback(({ target: { value } }) => {\n    onChange(value);\n  }, [onChange])\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input onChange={handleChange} className='new-message' value={message} />\n    </form >\n  );\n}\nexport default NewMessage;\n","import React from 'react';\nimport { MessageList } from '../../components';\n\nconst MessageListContainer = ({ messages, activeUser: { id: activeUserId } }) => (\n  <MessageList messages={messages[activeUserId] || []} />\n)\n\nexport default MessageListContainer;","import { connect } from 'react-redux';\nimport MessageListContainer from './MessageListContainer';\n\nconst mapStateToProps = ({ messages, activeUser }) => ({ messages, activeUser });\n\nexport default connect(mapStateToProps)(MessageListContainer);","import React from 'react';\nimport { UserList } from '../../components';\n\nconst UserListContainer = ({ setActiveUser, users, activeUser }) => (\n  <UserList users={users} activeUser={activeUser} onUserClick={setActiveUser} />\n)\n\nexport default UserListContainer;","import { connect } from 'react-redux';\nimport { setActiveUser } from '../../store/users/actions';\nimport UserListContainer from './UserListContainer';\n\nconst mapStateToProps = ({ users, activeUser }) => ({ users, activeUser });\nconst mapDispatchToProps = {\n  setActiveUser\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserListContainer);","import { SET_ACTIVE_USER } from \"../types\";\n\nexport default (user) => ({\n  type: SET_ACTIVE_USER,\n  payload: user\n})","import React, { useState, useCallback, useEffect } from 'react';\nimport { NewMessage } from '../../components';\n\nconst NewMessageContainer = ({ sendMessage, activeUser }) => {\n  const [message, setMessage] = useState('');\n\n  const handleSubmit = useCallback(() => {\n    sendMessage(message, activeUser);\n    setMessage('');\n  }, [sendMessage, message, activeUser])\n\n  useEffect(() => {\n    setMessage('');\n  }, [activeUser, setMessage]);\n\n  return (\n    <NewMessage message={message} onChange={setMessage} onSubmit={handleSubmit} />\n  )\n}\n\nexport default NewMessageContainer;","import { connect } from 'react-redux';\nimport { sendMessage } from '../../store/messages/actions';\nimport NewMessageContainer from './NewMessageContainer';\n\nconst mapStateToProps = ({ activeUser }) => ({ activeUser })\n\nconst mapDispatchToProps = {\n  sendMessage\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NewMessageContainer);","import { SEND_MESSAGE } from \"../types\";\n\nexport default (message, to) => ({\n  type: SEND_MESSAGE,\n  payload: {\n    message,\n    to\n  }\n})","import React from 'react';\nimport { UserListContainer, MessageListContainer, NewMessageContainer } from '../../../containers';\nimport './styles.css';\n\nconst ChatPage = () => (\n  <div className='chat-page'>\n    <UserListContainer />\n    <div className='chat-page__messages-section'>\n      <div className='chat-page__messages-section__message-list-container'>\n        <MessageListContainer />\n      </div>\n      <NewMessageContainer />\n    </div>\n  </div>\n)\n\nexport default ChatPage;","import React from 'react';\nimport { ChatPage } from './views/pages';\n\nfunction App() {\n  return <ChatPage />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport { Provider } from 'react-redux';\nimport { persistor, store } from './store';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}